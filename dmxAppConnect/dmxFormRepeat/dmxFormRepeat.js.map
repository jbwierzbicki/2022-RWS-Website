{"version":3,"sources":["components/formRepeat.js"],"names":["dmx","Component","initialData","canAdd","items","attributes","type","Array","Number","default","min","max","Infinity","sortable","Boolean","handle","String","animation","methods","add","this","_add","remove","index","_remove","move","oldIndex","newIndex","_move","moveToStart","moveToEnd","children","length","moveBefore","moveAfter","duplicate","_duplicate","reset","_render","render","node","_template","_templateFromChildren","querySelectorAll","forEach","input","firstBracket","name","indexOf","setAttribute","slice","props","_sortable","Sortable","create","onEnd","event","_refresh","performUpdate","updatedProps","has","option","repeatItems","_clear","i","fromInputs","$nodes","nodeType","push","from","toInputs","fromInput","toInput","tagName","value","checked","multiple","fromOption","selectedOptions","toOption","options","selected","dispatchEvent","Event","data","child","cloneNode","$node","appendChild","$parse","splice","$destroy","set","$index","$formindex","$canRemove","$canMoveToStart","$canMoveBefore","$canMoveAfter","$canMoveToEnd","map","innerHTML","updateDOM","template","document","createDocumentFragment","hasChildNodes","firstChild"],"mappings":"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","file":"dmxFormRepeat.js","sourcesContent":["dmx.Component('form-repeat', {\r\n\r\n  initialData: {\r\n    canAdd: true,\r\n    items: []\r\n  },\r\n\r\n  attributes: {\r\n    \r\n    items: {\r\n      type: [Array, Number],\r\n      default: 0\r\n    },\r\n\r\n    min: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n\r\n    max: {\r\n      type: Number,\r\n      default: Infinity\r\n    },\r\n\r\n    sortable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n\r\n    handle: {\r\n      type: String,\r\n      default: null\r\n    },\r\n\r\n    animation: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n\r\n  },\r\n\r\n  methods: {\r\n\r\n    add () {\r\n      this._add();\r\n    },\r\n\r\n    remove (index) {\r\n      this._remove(index);\r\n    },\r\n\r\n    move (oldIndex, newIndex) {\r\n      this._move(oldIndex, newIndex, true);\r\n    },\r\n\r\n    moveToStart (index) {\r\n      this._move(index, 0, true);\r\n    },\r\n\r\n    moveToEnd (index) {\r\n      this._move(index, this.children.length - 1, true);\r\n    },\r\n\r\n    moveBefore (index) {\r\n      this._move(index, index - 1, true);\r\n    },\r\n\r\n    moveAfter (index) {\r\n      this._move(index, index + 1, true);\r\n    },\r\n\r\n    duplicate (index) {\r\n      this._duplicate(index);\r\n    },\r\n\r\n    reset () {\r\n      this._render();\r\n    }\r\n\r\n  },\r\n\r\n  render (node) {\r\n    this._template = this._templateFromChildren(node);\r\n\r\n    const inputs = this._template.querySelectorAll('input[name], select[name], textarea[name]');\r\n\r\n    inputs.forEach((input) => {\r\n      const firstBracket = input.name.indexOf('[');\r\n\r\n      if (firstBracket > 0) {\r\n        input.setAttribute('dmx-bind:name', this.name + '[{{$formindex}}][' + input.name.slice(0, firstBracket) + ']' + input.name.slice(firstBracket));\r\n      } else {\r\n        input.setAttribute('dmx-bind:name', this.name + '[{{$formindex}}][' + input.name + ']');\r\n      }\r\n    });\r\n\r\n    if (this.props.sortable) {\r\n      this._sortable = Sortable.create(node, {\r\n        handle: this.props.handle,\r\n        onEnd: event => this._move(event.oldIndex, event.newIndex)\r\n      });\r\n    }\r\n\r\n    this._render();\r\n    this._refresh();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('items')) {\r\n      this._render();\r\n    }\r\n\r\n    if (updatedProps.has('sortable')) {\r\n      if (this._sortable) {\r\n        this._sortable.option('disabled', !this.props.sortable);\r\n      } else {\r\n        this._sortable = Sortable.create(node, {\r\n          handle: this.props.handle,\r\n          onEnd: event => this._move(event.oldIndex, event.newIndex)\r\n        });\r\n      }\r\n    }\r\n\r\n    if (updatedProps.has('handle')) {\r\n      if (this._sortable) {\r\n        this._sortable.option('handle', this.props.handle);\r\n      }\r\n    }\r\n\r\n    if (updatedProps.has('animation')) {\r\n      if (this._sortable) {\r\n        this._sortable.option('animation', this.props.animation);\r\n      }\r\n    }\r\n\r\n    this._refresh();\r\n  },\r\n\r\n  _render () {\r\n    const items = dmx.repeatItems(typeof this.props.items == 'string' ? Number(this.props.items) : this.props.items);\r\n    \r\n    if (items.length < this.props.min) items.length = this.props.min;\r\n    if (items.length > this.props.max) items.length = this.props.max;\r\n\r\n    this._clear();\r\n\r\n    for (let i = 0; i < items.length; i++) {\r\n      this._add(items[i]);\r\n    }\r\n  },\r\n\r\n  _duplicate (index) {\r\n    this._add();\r\n    \r\n    this._move(this.children.length - 1, index + 1, true);\r\n\r\n    let fromInputs = [];\r\n    this.children[index].$nodes.forEach((node) => {\r\n      if (node.nodeType == 1) {\r\n        fromInputs.push(...Array.from(node.querySelectorAll('input[name], textarea[name], select[name]')));\r\n      }\r\n    });\r\n    \r\n    let toInputs = [];\r\n    this.children[index + 1].$nodes.forEach((node) => {\r\n      if (node.nodeType == 1) {\r\n        toInputs.push(...Array.from(node.querySelectorAll('input[name], textarea[name], select[name]')));\r\n      }\r\n    });\r\n\r\n    // Only do something when the inputs match\r\n    if (fromInputs.length == toInputs.length) {\r\n      for (let i = 0; i < fromInputs.length; i++) {\r\n        const fromInput = fromInputs[i];\r\n        const toInput = toInputs[i];\r\n\r\n        // Inputs do not match???\r\n        if (fromInput.tagName != toInput.tagName) break;\r\n\r\n        if (fromInput.tagName == 'TEXTAREA') {\r\n          // textarea just copy value\r\n          toInput.value = fromInput.value;\r\n        } else if (fromInput.tagName == 'INPUT') {\r\n          if (fromInput.type == 'file' || fromInput.type == 'password') {\r\n            // skip file and password types\r\n            continue;\r\n          }\r\n\r\n          if (fromInput.type == 'checkbox' || fromInput.type == 'radio') {\r\n            // checkbox and radio we have to copy the checked property\r\n            toInput.checked = fromInput.checked;\r\n          } else {\r\n            // any other type input just copy value\r\n            toInput.value = fromInput.value;\r\n          }\r\n        } else if (fromInput.tagName == 'SELECT') {\r\n          if (fromInput.multiple) {\r\n            // for multiple selection we need to loop over the options\r\n            // first loop only the selected options\r\n            for (const fromOption of fromInput.selectedOptions) {\r\n              // second loop on target to find matching value\r\n              for (const toOption of toInput.options) {\r\n                if (fromOption.value == toOption.value) {\r\n                  // set selected when value matches\r\n                  toOption.selected = true;\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            // for single selection we can simply copy the value\r\n            toInput.value = fromInput.value;\r\n          }\r\n        }\r\n\r\n        // trigger a change event on the target to let App Connect know it changed\r\n        toInput.dispatchEvent(new Event('change'));\r\n      }\r\n    }\r\n  },\r\n\r\n  _add (data = {}) {\r\n    if (this.children.length >= this.props.max) return;\r\n\r\n    const RepeatItem = dmx.Component('repeat-item');\r\n    const child = new RepeatItem(this._template.cloneNode(true), this, data);\r\n\r\n    child.$nodes.forEach((node) => {\r\n      this.$node.appendChild(node);\r\n      child.$parse(node);\r\n    });\r\n\r\n    this.children.push(child);\r\n\r\n    this._refresh();\r\n  },\r\n\r\n  _remove (index) {\r\n    if (this.children.length <= this.props.min) return;\r\n\r\n    this.children.splice(index, 1).forEach((child) => {\r\n      child.$destroy();\r\n    });\r\n\r\n    this._refresh();\r\n  },\r\n\r\n  _refresh () {\r\n    this.children.forEach((child, index) => {\r\n      child.set({\r\n        $index: index,\r\n        $formindex: index,\r\n        $canRemove: this.children.length > this.props.min,\r\n        $canMoveToStart: index > 0,\r\n        $canMoveBefore: index > 0,\r\n        $canMoveAfter: index < this.children.length - 1,\r\n        $canMoveToEnd: index < this.children.length - 1\r\n      });\r\n    });\r\n\r\n    this.set('canAdd', this.children.length < this.props.max);\r\n    this.set('items', this.children.map(child => child.data));\r\n  },\r\n\r\n  _clear () {\r\n    this.children.splice(0).forEach((child) => {\r\n      child.$destroy();\r\n    });\r\n\r\n    this.$node.innerHTML = '';\r\n  },\r\n\r\n  _move (oldIndex, newIndex, updateDOM) {\r\n    if (oldIndex < 0 || oldIndex >= this.children.length) return;\r\n    if (newIndex < 0 || newIndex >= this.children.length) return;\r\n\r\n    this.children.splice(newIndex, 0, this.children.splice(oldIndex, 1)[0]);\r\n\r\n    if (updateDOM) {\r\n      this.$node.innerHTML = '';\r\n      this.children.forEach(child => {\r\n        child.$nodes.forEach((node) => {\r\n          this.$node.appendChild(node);\r\n        });\r\n      })\r\n    }\r\n    \r\n    this._refresh();\r\n  },\r\n\r\n  _templateFromChildren (node) {\r\n    const template = document.createDocumentFragment();\r\n    \r\n    while (node.hasChildNodes()) {\r\n      template.appendChild(node.firstChild);\r\n    }\r\n\r\n    return template;\r\n  }\r\n\r\n});"]}