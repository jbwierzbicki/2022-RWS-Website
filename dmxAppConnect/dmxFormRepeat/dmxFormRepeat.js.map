{"version":3,"sources":["components/formRepeat.js"],"names":["dmx","Component","initialData","canAdd","items","attributes","type","Array","Number","default","min","max","Infinity","sortable","Boolean","handle","String","animation","methods","add","this","_add","dispatchEvent","remove","index","_remove","move","oldIndex","newIndex","_move","moveToStart","moveToEnd","children","length","moveBefore","moveAfter","duplicate","_duplicate","reset","_render","events","added","Event","moved","removed","duplicated","render","node","_template","_templateFromChildren","querySelectorAll","forEach","input","firstBracket","name","indexOf","setAttribute","slice","props","_sortable","Sortable","create","onEnd","event","_refresh","performUpdate","updatedProps","has","option","repeatItems","_clear","i","fromInputs","$nodes","nodeType","push","from","toInputs","fromInput","toInput","tagName","value","checked","multiple","fromOption","selectedOptions","toOption","options","selected","data","child","cloneNode","$node","appendChild","$parse","splice","$destroy","set","$index","$formindex","$canRemove","$canMoveToStart","$canMoveBefore","$canMoveAfter","$canMoveToEnd","map","innerHTML","updateDOM","template","document","createDocumentFragment","hasChildNodes","firstChild"],"mappings":"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","file":"dmxFormRepeat.js","sourcesContent":["dmx.Component('form-repeat', {\r\n\r\n  initialData: {\r\n    canAdd: true,\r\n    items: []\r\n  },\r\n\r\n  attributes: {\r\n    \r\n    items: {\r\n      type: [Array, Number],\r\n      default: 0\r\n    },\r\n\r\n    min: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n\r\n    max: {\r\n      type: Number,\r\n      default: Infinity\r\n    },\r\n\r\n    sortable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n\r\n    handle: {\r\n      type: String,\r\n      default: null\r\n    },\r\n\r\n    animation: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n\r\n  },\r\n\r\n  methods: {\r\n\r\n    add () {\r\n      this._add();\r\n      this.dispatchEvent('added');\r\n    },\r\n\r\n    remove (index) {\r\n      this._remove(index);\r\n      this.dispatchEvent('removed', null, { index });\r\n    },\r\n\r\n    move (oldIndex, newIndex) {\r\n      this._move(oldIndex, newIndex, true);\r\n    },\r\n\r\n    moveToStart (index) {\r\n      this._move(index, 0, true);\r\n    },\r\n\r\n    moveToEnd (index) {\r\n      this._move(index, this.children.length - 1, true);\r\n    },\r\n\r\n    moveBefore (index) {\r\n      this._move(index, index - 1, true);\r\n    },\r\n\r\n    moveAfter (index) {\r\n      this._move(index, index + 1, true);\r\n    },\r\n\r\n    duplicate (index) {\r\n      this._duplicate(index);\r\n      this.dispatchEvent('duplicated', null, { index });\r\n    },\r\n\r\n    reset () {\r\n      this._render();\r\n    }\r\n\r\n  },\r\n\r\n  events: {\r\n    added: Event,\r\n    moved: Event,\r\n    removed: Event,\r\n    duplicated: Event,\r\n  },\r\n\r\n  render (node) {\r\n    this._template = this._templateFromChildren(node);\r\n\r\n    const inputs = this._template.querySelectorAll('input[name], select[name], textarea[name]');\r\n\r\n    inputs.forEach((input) => {\r\n      const firstBracket = input.name.indexOf('[');\r\n\r\n      if (firstBracket > 0) {\r\n        input.setAttribute('dmx-bind:name', this.name + '[{{$formindex}}][' + input.name.slice(0, firstBracket) + ']' + input.name.slice(firstBracket));\r\n      } else {\r\n        input.setAttribute('dmx-bind:name', this.name + '[{{$formindex}}][' + input.name + ']');\r\n      }\r\n    });\r\n\r\n    if (this.props.sortable) {\r\n      this._sortable = Sortable.create(node, {\r\n        handle: this.props.handle,\r\n        onEnd: event => this._move(event.oldIndex, event.newIndex),\r\n      });\r\n    }\r\n\r\n    this._render();\r\n    this._refresh();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('items')) {\r\n      this._render();\r\n    }\r\n\r\n    if (updatedProps.has('sortable')) {\r\n      if (this._sortable) {\r\n        this._sortable.option('disabled', !this.props.sortable);\r\n      } else {\r\n        this._sortable = Sortable.create(node, {\r\n          handle: this.props.handle,\r\n          onEnd: event => this._move(event.oldIndex, event.newIndex),\r\n        });\r\n      }\r\n    }\r\n\r\n    if (updatedProps.has('handle')) {\r\n      if (this._sortable) {\r\n        this._sortable.option('handle', this.props.handle);\r\n      }\r\n    }\r\n\r\n    if (updatedProps.has('animation')) {\r\n      if (this._sortable) {\r\n        this._sortable.option('animation', this.props.animation);\r\n      }\r\n    }\r\n\r\n    this._refresh();\r\n  },\r\n\r\n  _render () {\r\n    const items = dmx.repeatItems(typeof this.props.items == 'string' ? Number(this.props.items) : this.props.items);\r\n    \r\n    if (items.length < this.props.min) items.length = this.props.min;\r\n    if (items.length > this.props.max) items.length = this.props.max;\r\n\r\n    this._clear();\r\n\r\n    for (let i = 0; i < items.length; i++) {\r\n      this._add(items[i]);\r\n    }\r\n  },\r\n\r\n  _duplicate (index) {\r\n    this._add();\r\n    \r\n    this._move(this.children.length - 1, index + 1, true);\r\n\r\n    let fromInputs = [];\r\n    this.children[index].$nodes.forEach((node) => {\r\n      if (node.nodeType == 1) {\r\n        fromInputs.push(...Array.from(node.querySelectorAll('input[name], textarea[name], select[name]')));\r\n      }\r\n    });\r\n    \r\n    let toInputs = [];\r\n    this.children[index + 1].$nodes.forEach((node) => {\r\n      if (node.nodeType == 1) {\r\n        toInputs.push(...Array.from(node.querySelectorAll('input[name], textarea[name], select[name]')));\r\n      }\r\n    });\r\n\r\n    // Only do something when the inputs match\r\n    if (fromInputs.length == toInputs.length) {\r\n      for (let i = 0; i < fromInputs.length; i++) {\r\n        const fromInput = fromInputs[i];\r\n        const toInput = toInputs[i];\r\n\r\n        // Inputs do not match???\r\n        if (fromInput.tagName != toInput.tagName) break;\r\n\r\n        if (fromInput.tagName == 'TEXTAREA') {\r\n          // textarea just copy value\r\n          toInput.value = fromInput.value;\r\n        } else if (fromInput.tagName == 'INPUT') {\r\n          if (fromInput.type == 'file' || fromInput.type == 'password') {\r\n            // skip file and password types\r\n            continue;\r\n          }\r\n\r\n          if (fromInput.type == 'checkbox' || fromInput.type == 'radio') {\r\n            // checkbox and radio we have to copy the checked property\r\n            toInput.checked = fromInput.checked;\r\n          } else {\r\n            // any other type input just copy value\r\n            toInput.value = fromInput.value;\r\n          }\r\n        } else if (fromInput.tagName == 'SELECT') {\r\n          if (fromInput.multiple) {\r\n            // for multiple selection we need to loop over the options\r\n            // first loop only the selected options\r\n            for (const fromOption of fromInput.selectedOptions) {\r\n              // second loop on target to find matching value\r\n              for (const toOption of toInput.options) {\r\n                if (fromOption.value == toOption.value) {\r\n                  // set selected when value matches\r\n                  toOption.selected = true;\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            // for single selection we can simply copy the value\r\n            toInput.value = fromInput.value;\r\n          }\r\n        }\r\n\r\n        // trigger a change event on the target to let App Connect know it changed\r\n        toInput.dispatchEvent(new Event('change'));\r\n      }\r\n    }\r\n  },\r\n\r\n  _add (data = {}) {\r\n    if (this.children.length >= this.props.max) return;\r\n\r\n    const RepeatItem = dmx.Component('repeat-item');\r\n    const child = new RepeatItem(this._template.cloneNode(true), this, data);\r\n\r\n    child.$nodes.forEach((node) => {\r\n      this.$node.appendChild(node);\r\n      child.$parse(node);\r\n    });\r\n\r\n    this.children.push(child);\r\n\r\n    this._refresh();\r\n  },\r\n\r\n  _remove (index) {\r\n    if (this.children.length <= this.props.min) return;\r\n\r\n    this.children.splice(index, 1).forEach((child) => {\r\n      child.$destroy();\r\n    });\r\n\r\n    this._refresh();\r\n  },\r\n\r\n  _refresh () {\r\n    this.children.forEach((child, index) => {\r\n      child.set({\r\n        $index: index,\r\n        $formindex: index,\r\n        $canRemove: this.children.length > this.props.min,\r\n        $canMoveToStart: index > 0,\r\n        $canMoveBefore: index > 0,\r\n        $canMoveAfter: index < this.children.length - 1,\r\n        $canMoveToEnd: index < this.children.length - 1\r\n      });\r\n    });\r\n\r\n    this.set('canAdd', this.children.length < this.props.max);\r\n    this.set('items', this.children.map(child => child.data));\r\n  },\r\n\r\n  _clear () {\r\n    this.children.splice(0).forEach((child) => {\r\n      child.$destroy();\r\n    });\r\n\r\n    this.$node.innerHTML = '';\r\n  },\r\n\r\n  _move (oldIndex, newIndex, updateDOM) {\r\n    if (oldIndex < 0 || oldIndex >= this.children.length) return;\r\n    if (newIndex < 0 || newIndex >= this.children.length) return;\r\n\r\n    this.children.splice(newIndex, 0, this.children.splice(oldIndex, 1)[0]);\r\n\r\n    if (updateDOM) {\r\n      this.$node.innerHTML = '';\r\n      this.children.forEach(child => {\r\n        child.$nodes.forEach((node) => {\r\n          this.$node.appendChild(node);\r\n        });\r\n      })\r\n    }\r\n    \r\n    this._refresh();\r\n\r\n    this.dispatchEvent('moved', null, { oldIndex, newIndex });\r\n  },\r\n\r\n  _templateFromChildren (node) {\r\n    const template = document.createDocumentFragment();\r\n    \r\n    while (node.hasChildNodes()) {\r\n      template.appendChild(node.firstChild);\r\n    }\r\n\r\n    return template;\r\n  }\r\n\r\n});"]}